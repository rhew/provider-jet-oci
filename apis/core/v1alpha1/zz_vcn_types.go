/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Byoipv6CidrDetailsObservation struct {
}

type Byoipv6CidrDetailsParameters struct {

	// +kubebuilder:validation:Required
	Byoipv6RangeID *string `json:"byoipv6rangeId" tf:"byoipv6range_id,omitempty"`

	// +kubebuilder:validation:Required
	Ipv6CidrBlock *string `json:"ipv6cidrBlock" tf:"ipv6cidr_block,omitempty"`
}

type VcnObservation struct {
	Byoipv6CidrBlocks []*string `json:"byoipv6cidrBlocks,omitempty" tf:"byoipv6cidr_blocks,omitempty"`

	DefaultDHCPOptionsID *string `json:"defaultDhcpOptionsId,omitempty" tf:"default_dhcp_options_id,omitempty"`

	DefaultRouteTableID *string `json:"defaultRouteTableId,omitempty" tf:"default_route_table_id,omitempty"`

	DefaultSecurityListID *string `json:"defaultSecurityListId,omitempty" tf:"default_security_list_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ipv6CidrBlocks []*string `json:"ipv6cidrBlocks,omitempty" tf:"ipv6cidr_blocks,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	VcnDomainName *string `json:"vcnDomainName,omitempty" tf:"vcn_domain_name,omitempty"`
}

type VcnParameters struct {

	// +kubebuilder:validation:Optional
	Byoipv6CidrDetails []Byoipv6CidrDetailsParameters `json:"byoipv6cidrDetails,omitempty" tf:"byoipv6cidr_details,omitempty"`

	// +kubebuilder:validation:Optional
	CidrBlock *string `json:"cidrBlock,omitempty" tf:"cidr_block,omitempty"`

	// +kubebuilder:validation:Optional
	CidrBlocks []*string `json:"cidrBlocks,omitempty" tf:"cidr_blocks,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DNSLabel *string `json:"dnsLabel,omitempty" tf:"dns_label,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	Ipv6PrivateCidrBlocks []*string `json:"ipv6privateCidrBlocks,omitempty" tf:"ipv6private_cidr_blocks,omitempty"`

	// +kubebuilder:validation:Optional
	IsIpv6Enabled *bool `json:"isIpv6Enabled,omitempty" tf:"is_ipv6enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IsOracleGuaAllocationEnabled *bool `json:"isOracleGuaAllocationEnabled,omitempty" tf:"is_oracle_gua_allocation_enabled,omitempty"`
}

// VcnSpec defines the desired state of Vcn
type VcnSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VcnParameters `json:"forProvider"`
}

// VcnStatus defines the observed state of Vcn.
type VcnStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VcnObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vcn is the Schema for the Vcns API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type Vcn struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VcnSpec   `json:"spec"`
	Status            VcnStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VcnList contains a list of Vcns
type VcnList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vcn `json:"items"`
}

// Repository type metadata.
var (
	Vcn_Kind             = "Vcn"
	Vcn_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vcn_Kind}.String()
	Vcn_KindAPIVersion   = Vcn_Kind + "." + CRDGroupVersion.String()
	Vcn_GroupVersionKind = CRDGroupVersion.WithKind(Vcn_Kind)
)

func init() {
	SchemeBuilder.Register(&Vcn{}, &VcnList{})
}
