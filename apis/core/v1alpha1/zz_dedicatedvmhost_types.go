/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DedicatedVMHostObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	RemainingMemoryInGbs *float64 `json:"remainingMemoryInGbs,omitempty" tf:"remaining_memory_in_gbs,omitempty"`

	RemainingOcpus *float64 `json:"remainingOcpus,omitempty" tf:"remaining_ocpus,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	TotalMemoryInGbs *float64 `json:"totalMemoryInGbs,omitempty" tf:"total_memory_in_gbs,omitempty"`

	TotalOcpus *float64 `json:"totalOcpus,omitempty" tf:"total_ocpus,omitempty"`
}

type DedicatedVMHostParameters struct {

	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// +kubebuilder:validation:Required
	CompartmentID *string `json:"compartmentId" tf:"compartment_id,omitempty"`

	// +kubebuilder:validation:Required
	DedicatedVMHostShape *string `json:"dedicatedVmHostShape" tf:"dedicated_vm_host_shape,omitempty"`

	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

// DedicatedVMHostSpec defines the desired state of DedicatedVMHost
type DedicatedVMHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedVMHostParameters `json:"forProvider"`
}

// DedicatedVMHostStatus defines the observed state of DedicatedVMHost.
type DedicatedVMHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedVMHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedVMHost is the Schema for the DedicatedVMHosts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ocijet}
type DedicatedVMHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DedicatedVMHostSpec   `json:"spec"`
	Status            DedicatedVMHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedVMHostList contains a list of DedicatedVMHosts
type DedicatedVMHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedVMHost `json:"items"`
}

// Repository type metadata.
var (
	DedicatedVMHost_Kind             = "DedicatedVMHost"
	DedicatedVMHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedVMHost_Kind}.String()
	DedicatedVMHost_KindAPIVersion   = DedicatedVMHost_Kind + "." + CRDGroupVersion.String()
	DedicatedVMHost_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedVMHost_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedVMHost{}, &DedicatedVMHostList{})
}
